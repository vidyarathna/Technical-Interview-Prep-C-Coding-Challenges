/*
Problem Statement:
Given a singly linked list, determine if it is a palindrome.

Example:
Input: 1 -> 2 -> 3 -> 2 -> 1
Output: Yes (The linked list is a palindrome)

Input: 1 -> 2 -> 3 -> 4 -> 5
Output: No (The linked list is not a palindrome)
*/


// Solution for checking if a linked list is palindrome
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

struct Node {
    int data;
    struct Node* next;
};

bool isPalindrome(struct Node* head) {
    struct Node* slow = head;
    struct Node* fast = head;
    struct Node* prev_slow = head;
    struct Node* mid_node = NULL;
    bool is_palindrome = true;

    while (fast != NULL && fast->next != NULL) {
        fast = fast->next->next;
        prev_slow = slow;
        slow = slow->next;
    }

    if (fast != NULL) {
        mid_node = slow;
        slow = slow->next;
    }

    struct Node* second_half = slow;
    prev_slow->next = NULL;
    struct Node* prev = NULL;
    struct Node* current = second_half;
    struct Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    second_half = prev;

    struct Node* p = head;
    struct Node* q = second_half;

    while (p != NULL && q != NULL) {
        if (p->data != q->data) {
            is_palindrome = false;
            break;
        }
        p = p->next;
        q = q->next;
    }

    prev = NULL;
    current = second_half;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    second_half = prev;

    if (mid_node != NULL) {
        prev_slow->next = mid_node;
        mid_node->next = second_half;
    } else {
        prev_slow->next = second_half;
    }

    return is_palindrome;
}
